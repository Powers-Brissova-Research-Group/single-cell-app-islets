}
### Show a summary of the pollutant values
print.Summary <- function(variable) {
cat("ID:", variable[[1]], "\n")
print(variable[[2]])
invisible(variable)
}
data <- read.csv("/Users/sshrestha/OneDrive - VUMC/Coursera/Software development in R/Advanced R programming/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
#this function computes the factorial of an integer >=0
Factorial_loop <- function (x){
if (x<0){
print ("X must be greater or equal to 0")
} else if (x==0){
1
} else {
factorial <- 1
for(i in 1:x){
factorial <-factorial*i
}
factorial
}
# example
Factorial_loop(6)
#this function computes the factorial of an integer >=0
library(purrr)
Factorial_reduce <- function (x){
if (x<0){
print ("X must be greater or equal to 0")
} else if (x==0){
1
} else {
reduce(c(1:x), function (x,y){
message("x is ", x)
message("y is ", y)
message("")
x*y
})
}
# example
Factorial_reduce(6)
#this function computes the factorial of an integer >=0
Factorial_func <- function(x){
if (x==0){
1
}else{
x * Factorial_func(x-1)
}
# example
Factorial_func(6)
# example
Factorial_func(6)
#this function computes the factorial of an integer >=0
factorial_tbl <- c (1, rep(NA, 23))
Factorial_mem <- function(x){
stopifnot(x >=0)
if (x==0){
1
}else{
if(!is.na(factorial_tbl[x])){
factorial_tbl[x]
} else {
factorial_tbl[x-1] <<- Factorial_mem(x-1)
x * factorial_tbl[x-1]
}
# example
Factorial_mem(6)
# example
Factorial_mem(6)
Factorial_loop = function(n){
x = 1
if(n>1) {
for(i in seq_along(1:n)){
x = x * i
}
return(x)
}
x = Factorial_loop(10)
x
Factorial_loop<- function (x) {
factorial = 1
#if x is negative
if(x < 0) {
print("factorial does not exist for negative numbers")
#if x=0
}else if(x == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:x){
factorial = factorial * i
}
print(paste("The factorial of", x ,"is",factorial))
}
Factorial_loop(6)
Factorial_loop = function(n){
x = 1
if(n>1) {
for(i in seq_along(1:n)){
x = x * i
}
return(x)
}
x = Factorial_loop(6)
x
library(tidyverse)
Factorial_loop <- function(n){
if(n > 1){
these_nums <- unlist(lapply(1:(n-1), function(x){
n-x
}))
this_num <- n*prod(these_nums)
}
if(n == 0 | 1){
this_num <- 1
}
return(this_num)
}
Factorial_loop(6)
Factorial_reduce <- function(n){
if(n > 0){
this_array <- 1:n
out <- reduce(rev(this_array), function(x,y){x*y})
}
if(n == 0){
out <- 1
}
return(out)
}
Factorial_reduce(6)
Factorial_func <- function(n){
stopifnot(n >= 0)
if(n == 0){
1
} else {
n * Factorial_func(n-1)
}
Factorial_func(6)
mem_tbl <- c(1, rep(NA, 100))
Factorial_mem <- function(x){
if (x == 0) return(1)
if(!is.na(mem_tbl[x])) return(mem_tbl[x])
else{
mem_tbl[x] <<- x * Factorial_mem(x-1)
return(mem_tbl[x])
}
Factorial_mem(6)
Factorial_func <- function(n){
stopifnot(n >= 0)
if(n == 0){
1
} else {
n * Factorial_func(n-1)
}
Factorial_func(6)
fact_table <- c(1,1,rep(NA,23))
Factorial_mem <- function(n){
stopifnot(n >= 0)
if(!is.na(fact_table[n+1])){
fact_table[n+1]
} else {
fact_table[n+1] <<- reduce(rev(1:n), function(x,y){x*y})
fact_table[n+1]
}
Factorial_mem(6)
time <- function (input) {
microbenchmark(
l <- Factorial_loop(input),
r <- Factorial_reduce(input),
f <- Factorial_func(input),
m<- Factorial_mem(input)
)
}
time(6)
library(purrr)
library(microbenchmark)
time <- function (input) {
microbenchmark(
l <- Factorial_loop(input),
r <- Factorial_reduce(input),
f <- Factorial_func(input),
m<- Factorial_mem(input)
)
}
time(6)
library(networkD3)
library(dplyr)
link<-read.csv("/Users/sshrestha/Desktop/annotations.csv")
link2<-link%>% select(leiden,cluster_res0.5)
link2$leiden = paste0("leiden_",link2$leiden)
link2$cluster_res0.5 = paste0("seurat_",link2$cluster_res0.5)
names(link2) = c("source", "target")
link3 <- link2 %>%
group_by(source, target) %>%
summarise(values = n())
nodes <- data.frame(
name=c(as.character(link2$source),
as.character(link2$target)) %>% unique()
)
link4<-as.data.frame(link3)
link4[,c(1,2,3)] <- as.numeric(link4[,c(1,2,3)])
sankeyNetwork(Links = link4, Nodes = nodes, Source = "source",
Target = "target", Value = "values", NodeID = "name",
fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = links2, Nodes = nodes2,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12)
lapply(link4,"class")
eaxmple
library(networkD3)
nodes2 = data.frame("name" =
c("Node A", # Node 0
"Node B", # Node 1
"Node C", # Node 2
"Node D"))# Node 3
links2 = as.data.frame(matrix(c(
0, 1, 10, # Each row represents a link. The first number
0, 2, 20, # represents the node being conntected from.
1, 3, 30, # the second number represents the node connected to.
2, 3, 40),# The third number is the value of the node
byrow = TRUE, ncol = 3))
names(links2) = c("source", "target", "value")
sankeyNetwork(Links = links2, Nodes = nodes2,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 12)
?sankeyNetwork
lapply(links2,"class")
URL <- paste0(
"https://cdn.rawgit.com/christophergandrud/networkD3/",
"master/JSONdata/energy.json")
Energy <- jsonlite::fromJSON(URL)
ttt<-Energy$links
View(ttt)
lapply(ttt,"class")
# Data source: http://goo.gl/vcKo6y
UKvisits <- data.frame(origin=c(
"France", "Germany", "USA",
"Irish Republic", "Netherlands",
"Spain", "Italy", "Poland",
"Belgium", "Australia",
"Other countries", rep("UK", 5)),
visit=c(
rep("UK", 11), "Scotland",
"Wales", "Northern Ireland",
"England", "London"),
weights=c(
c(12,10,9,8,6,6,5,4,4,3,33)/100*31.8,
c(2.2,0.9,0.4,12.8,15.5)))
View(UKvisits)
View(link2)
sankeyNetwork(Links = link2, Nodes = nodes, Source = "source",
Target = "target", Value = "values", NodeID = "name",
fontSize = 12, nodeWidth = 30)
View(links2)
View(link2)
sankeyNetwork(Links = link2, Nodes = nodes, Source = "source",
Target = "target", NodeID = "name",
fontSize = 12, nodeWidth = 30)
lapply(link2,"class")
sankeyNetwork(Links = link4, Nodes = nodes, Source = "source",
Target = "target", NodeID = "name",
fontSize = 12, nodeWidth = 30)
View(UKvisits)
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
require(googleVis)
install.packages(googleVis)
install.packages("googleVis")
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
require(googleVis)
plot(
to="visit", weight="weight",
plot(
gvisSankey(UKvisits, from="origin",
to="visit", weight="weight",
options=list(
height=250,
sankey="{link:{color:{fill:'lightblue'}}}"
))
plot(
gvisSankey(UKvisits, from="origin",
to="visit", weight="weight",
options=list(
height=250,
sankey="{link:{color:{fill:'lightblue'}}}"
)))
plot(
gvisSankey(link2, from="source",
to="target",
options=list(
height=250,
sankey="{link:{color:{fill:'lightblue'}}}"
)))
plot(
gvisSankey(link4, from="source",
to="target",weight="values",
options=list(
height=250,
sankey="{link:{color:{fill:'lightblue'}}}"
)))
View(link4)
plot(
gvisSankey(link4, from="source",
to="target",weight="values",
options=list(
height=250,
sankey="{link:{color:{fill:'lightblue'}}}"
)))
BiocManager::install("romanhaa/cerebroApp")
cerebroApp::launchCerebro()
devtools::install_version("spatstat", version = "1.64-1")
library(Seurat)
shiny::runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
runApp('OneDrive - VUMC/3351/Steve-Vivek study/app')
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
tble<-tble %>%rename(Gene= features.plot,
CellType=id,
'Mean Expression '=avg.exp.scaled,
'% Cells expressed'= pct.exp,
Average_expression= avg.exp)
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
library(biomaRt)
ensembl = useMart(
"ensembl",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl" )
attr <- listAttributes(ensembl)
View(attr)
load("/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/Islets2.Rda")
genemap <- getBM( attributes = c("ensembl_gene_id", "mgi_symbol",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position','source'),
filters = "ensembl_gene_id",
values = rownames(Islets),
mart = ensembl,
useCache = FALSE)
genemap <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position','source'),
filters = "ensembl_gene_id",
values = rownames(Islets),
mart = ensembl,
useCache = FALSE)
idx <- match( roownames(Islets), genemap$mgi_symbol )
idx <- match( rownames(Islets), genemap$mgi_symbol )
Gene_desp <- genemap$hgnc_symbol[ idx ]
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
Gene_desp <- genemap$hgnc_symbol[ idx ]
View(genemap)
Gene_desp <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position','source'),
filters = "ensembl_gene_id",
values = rownames(Islets),
mart = hgnc_symbol,
useCache = FALSE)
ensembl = useMart(
"hgnc_symbol",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl" )
?listMarts
if(interactive()){
listMarts()
}
head(biomaRt::listMarts(host = "www.ensembl.org"), 10)
ensembl = useMart(
"ensembl",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl" )
Gene_desp <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position','source'),
filters = "hgnc_symbol",
values = rownames(Islets),
mart = ensembl,
useCache = FALSE)
View(Gene_desp)
write.csv(Gene_desp, "/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/biomart_annotation.csv")
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
Gene_desp<-read.csv("DATA/biomart_annotation.csv",header = TRUE, row.names = 1)
Gene_desp<-read.csv("/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/biomart_annotation.csv",header = TRUE, row.names = 1)
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
Gene_desp<-read.csv("/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/biomart_annotation.csv",header = TRUE, row.names = 1)
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
Gene_desp<-read.csv("/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/biomart_annotation.csv",header = TRUE, row.names = 1)
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
shiny::runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
shiny::runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
runApp('OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2')
shiny::runApp('Documents/GitHub/single-cell-app-islets')
runApp('Documents/GitHub/single-cell-app-islets')
library(biomaRt)
ensembl = useMart(
"ensembl",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl" )
load("/Users/sshrestha/OneDrive - VUMC/4752/SeqRun3_2018-07-20/Cellranger3.1/Diabetes/scRNAseq-PancreaticIslets-2/DATA/Islets2.Rda")
Gene_desp <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position','source'),
filters = "hgnc_symbol",
values = rownames(Islets),
mart = ensembl,
useCache = FALSE)
View(Gene_desp)
Gene_desp <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position'),
filters = "hgnc_symbol",
values = rownames(Islets),
mart = ensembl,
useCache = FALSE)
write.csv(Gene_desp, "/Users/sshrestha/Desktop/biomart_annotation.csv")
length(rownames(Islets))
ttt<-rownames(Islets)
ttt['ASAP3']
ttt['ASAP3',]
Islets['ASAP3',]
ttt<-as.data.frame(ttt)
View(ttt)
library(dplyr)
library(biomaRt)
library(readr)
# load data----
load("DATA/Islets2.Rda")
# extract Gene description
ref<-read_tsv("DATA/refdata-cellranger-GRCh38-1.2.0/Homo_sapiens.GRCh38.84_gene_annotation_table.txt")
# fetch gene id info from biomart
mart <- useEnsembl(biomart = "ensembl",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl",
version = "80")
genemap <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position'),
filters = "ensembl_gene_id",
values = ref$gene_id,
mart = mart,
useCache = FALSE)
# bind the seurat data back to original GRC38 genes, NOT biomart
idx <- match( rownames(Islets), ref$GeneSymbol)
Islets_ensembl <- ref[ idx, ]
# now, bind the biomart data
idx2 <- match( Islets_ensembl$gene_id, genemap$ensembl_gene_id)
Islets_ensembl <- genemap[ idx2, ]
# extract Gene description
ref<-read_tsv("DATA/refdata-cellranger-GRCh38-1.2.0/Homo_sapiens.GRCh38.84_gene_annotation_table.txt")
setwd("~/Documents/GitHub/single-cell-app-islets")
# extract Gene description
ref<-read_tsv("DATA/refdata-cellranger-GRCh38-1.2.0/Homo_sapiens.GRCh38.84_gene_annotation_table.txt")
# fetch gene id info from biomart
mart <- useEnsembl(biomart = "ensembl",
host = "uswest.ensembl.org",
dataset = "hsapiens_gene_ensembl",
version = "80")
genemap <- getBM( attributes = c("ensembl_gene_id",'hgnc_symbol', "description",'gene_biotype', 'chromosome_name', 'start_position', 'end_position'),
filters = "ensembl_gene_id",
values = ref$gene_id,
mart = mart,
useCache = FALSE)
# bind the seurat data back to original GRC38 genes, NOT biomart
idx <- match( rownames(Islets), ref$GeneSymbol)
# load data----
load("DATA/Islets2.Rda")
# bind the seurat data back to original GRC38 genes, NOT biomart
idx <- match( rownames(Islets), ref$GeneSymbol)
Islets_ensembl <- ref[ idx, ]
# now, bind the biomart data
idx2 <- match( Islets_ensembl$gene_id, genemap$ensembl_gene_id)
Islets_ensembl <- genemap[ idx2, ]
# and sort by gene symbol
Islets_ensembl <- Islets_ensembl %>% arrange(hgnc_symbol)
# fill in empty symbols with "no symbol available"
Islets_ensembl$hgnc_symbol <- ifelse(Islets_ensembl$hgnc_symbol == "", "no symbol available", Islets_ensembl$hgnc_symbol)
# and sort by gene symbol
Islets_ensembl <- Islets_ensembl %>% arrange(hgnc_symbol)
View(Islets_ensembl)
# and save
write.csv(Islets_ensembl, "DATA/gene_annotation_sorted3.csv",row.names=FALSE)
shiny::runApp()
runApp()
# and save
write.csv(Islets_ensembl, "DATA/gene_annotation_sorted3.csv",row.names=FALSE)
runApp()
# bind the seurat data back to original GRC38 genes, NOT biomart
idx <- match( rownames(Islets), ref$GeneSymbol)
Islets_ensembl <- ref[ idx, ]
# now, bind the biomart data
idx2 <- match( Islets_ensembl$gene_id, genemap$ensembl_gene_id)
Islets_ensembl <- genemap[ idx2, ]
# and sort by gene symbol
Islets_ensembl <- Islets_ensembl %>% arrange(hgnc_symbol)
# fill in empty symbols with "no symbol available"
Islets_ensembl$hgnc_symbol <- ifelse(Islets_ensembl$hgnc_symbol == "", "no symbol available", Islets_ensembl$hgnc_symbol)
# and sort by gene symbol
Islets_ensembl <- Islets_ensembl %>% arrange(hgnc_symbol)
# and save
write.csv(Islets_ensembl, "DATA/gene_annotation_sorted3.csv",row.names=FALSE)
runApp()
shiny::runApp()
runApp()
